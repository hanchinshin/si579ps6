{"version":3,"sources":["OutputItem.js","App.js","index.js"],"names":["OutputItem","parameter","description","className","onClick","onClickSaveWords","kv","App","wordInput","useRef","useState","savedWords","setSavedWords","outDescription","setOutDescription","wordOutput","setWordOutput","link","getRhymes","a","fetch","current","value","result","json","dict","length","elem","map","word","i","saveWords","prevWords","concat","join","ref","onKeyDown","e","key","type","placeholder","getSynonyms","id","ReactDOM","render","document","getElementById"],"mappings":"uLAQeA,MARf,SAAoBC,GAChB,OAAO,6BACC,+BACKA,EAAUC,YAAY,wBAAQC,UAAU,0BAA0BC,QAASH,EAAUI,iBAA/D,oBADlBJ,EAAUK,OCkHhBC,MA3Ef,WACE,IAAMC,EAAYC,iBAAO,IACzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA4CF,mBAAS,IAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KACA,EAAoCJ,mBAAS,IAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACMC,EAAO,kCALA,SAQEC,IARF,2EAQb,gCAAAC,EAAA,sEACuBC,MAAMH,EAAO,WAAaT,EAAUa,QAAQC,OADnE,cACQC,EADR,gBAEqBA,EAAOC,OAF5B,OAEQC,EAFR,OAGEX,EAAkB,yBAA2BN,EAAUa,QAAQC,OAC7C,IAAdG,EAAKC,OACPV,EAAc,gBAENW,EAAOF,EAAKG,KAAI,SAACC,EAAMC,GAAP,OAAa,cAAC,EAAD,CAAY5B,YAAa2B,EAAKA,KACjExB,iBAAmB,kBAAM0B,EAAUF,EAAKA,YACxCb,EAAcW,IATpB,4CARa,kEAsBb,gCAAAR,EAAA,sEACuBC,MAAMH,EAAO,MAAQT,EAAUa,QAAQC,OAD9D,cACQC,EADR,gBAEqBA,EAAOC,OAF5B,OAEQC,EAFR,OAGEX,EAAkB,mCAAqCN,EAAUa,QAAQC,OACvD,IAAdG,EAAKC,OACPV,EAAc,gBAENW,EAAOF,EAAKG,KAAI,SAACC,EAAMC,GAAP,OAAa,cAAC,EAAD,CAAY5B,YAAa2B,EAAKA,KACjExB,iBAAmB,kBAAM0B,EAAUF,EAAKA,YACxCb,EAAcW,IATpB,4CAtBa,sBAoCb,SAASI,EAAUF,GACfjB,GAAc,SAAAoB,GAAS,OAAIA,EAAUC,OAAOJ,MAWhD,OACI,sBAAK1B,UAAU,YAAf,UACE,oBAAIA,UAAU,QAAd,wBACA,yFACA,qBAAKA,UAAU,MAAf,SACI,sBAAKA,UAAU,MAAf,yBACc,+BAAOQ,EAAaA,EAAWuB,KAAK,MAAM,UAG5D,qBAAK/B,UAAU,MAAf,SACI,sBAAKA,UAAU,kBAAf,UACI,uBAAOgC,IAAK3B,EAAW4B,UAlBrC,SAAmBC,GACJ,UAAVA,EAAEC,KACDpB,KAgBqDf,UAAU,eAAeoC,KAAK,OAAOC,YAAY,eAC9F,wBAAQD,KAAK,SAASpC,UAAU,kBAAkBC,QAAU,kBAAMc,KAAlE,gCACA,wBAAQqB,KAAK,SAASpC,UAAU,oBAAoBC,QAAU,kBA7D/D,0CA6DqEqC,IAApE,gCAGR,qBAAKtC,UAAU,MAAf,SACI,oBAAIA,UAAU,MAAMuC,GAAG,qBAAvB,SAA6C7B,MAEjD,qBAAKV,UAAU,aAAf,SACI,4BAAYA,UAAU,MAAMuC,GAAG,cAA/B,SAA8C3B,UCzG1D4B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.992af95b.chunk.js","sourcesContent":["function OutputItem(parameter) {\n    return(<ul>\n            <li key={parameter.kv}>\n                {parameter.description}<button className=\"btn btn-outline-success\" onClick={parameter.onClickSaveWords}>save</button>\n            </li>\n            </ul>)\n}\n\nexport default OutputItem;","//bootstrap is on the index.html file\nimport { useRef, useState } from 'react';\nimport OutputItem from './OutputItem';\n\n//add \"s\"\nfunction addS(num) {\n    if (num === 1) {\n        return \"\";\n    } else {\n        return \"s\";\n    }\n}\n\n//func from PS5\nfunction groupBy(objects, property) {\n    // If property is not a function, convert it to a function that accepts one argument (an object) and returns that object's\n    // value for property (obj[property])\n    if(typeof property !== 'function') {\n        const propName = property;\n        property = (obj) => obj[propName];\n    }\n\n    const groupedObjects = new Map(); // Keys: group names, value: list of items in that group\n    for(const object of objects) {\n        const groupName = property(object);\n        //Make sure that the group exists\n        if(!groupedObjects.has(groupName)) {\n            groupedObjects.set(groupName, []);\n        }\n        groupedObjects.get(groupName).push(object);\n    }\n\n    // Create an object with the results. Sort the keys so that they are in a sensible \"order\"\n    const result = {};\n    for(const key of Array.from(groupedObjects.keys()).sort()) {\n        result[key] = groupedObjects.get(key);\n    }\n    return result;\n}\n\n//PS 6 func\nfunction App() {\n  const wordInput = useRef(\"\");\n  const [savedWords, setSavedWords] = useState([]);\n  const [outDescription, setOutDescription] = useState(\"\");\n  const [wordOutput, setWordOutput] = useState(\"\");\n  const link = \"https://api.datamuse.com/words?\"\n\n  //get rhymes\n  async function getRhymes() {\n    const result = await fetch(link + \"rel_rhy=\" + wordInput.current.value);\n    const dict = await result.json();\n    setOutDescription('Words that rhyme with ' + wordInput.current.value);\n    if (dict.length===0) {\n      setWordOutput(\"(no result)\");\n    } else {\n        const elem = dict.map((word, i) => <OutputItem description={word.word} \n        onClickSaveWords={ () => saveWords(word.word) }/>)\n        setWordOutput(elem);\n    }\n  }\n\n  //get synonyms\n  async function getSynonyms() {\n    const result = await fetch(link + \"ml=\" + wordInput.current.value);\n    const dict = await result.json();\n    setOutDescription('Words with a similar meaning to ' + wordInput.current.value);\n    if (dict.length===0) {\n      setWordOutput(\"(no result)\");\n    } else {\n        const elem = dict.map((word, i) => <OutputItem description={word.word} \n        onClickSaveWords={ () => saveWords(word.word) }/>)\n        setWordOutput(elem);\n    }\n  }\n\n  //concatenate func\n  function saveWords(word){\n      setSavedWords(prevWords => prevWords.concat(word));\n  }\n\n  //Enter\n  function onKeydown(e) {\n    if(e.key === \"Enter\" ) {\n        getRhymes();\n    }\n}\n\n  //html skeleton\n  return (\n      <div className=\"container\">\n        <h1 className=\"title\">SI579 PS6 </h1>\n        <p> link to GitHub: https://github.com/hanchinshin/si579ps6</p>\n        <div className=\"row\">\n            <div className=\"col\">\n              Saved Words:<span>{savedWords ? savedWords.join(\", \"):\"\"}</span>\n            </div>\n        </div>\n        <div className=\"row\">\n            <div className=\"input-group col\">\n                <input ref={wordInput} onKeyDown={onKeydown} className=\"form-control\" type=\"text\" placeholder=\"Enter Word\"/>\n                <button type=\"button\" className=\"btn btn-primary\" onClick={ () => getRhymes() }>Show Rhyming Words</button>\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={ () => getSynonyms() }>Show Synonyms</button>\n            </div>\n        </div>\n        <div className=\"row\">\n            <h2 className=\"col\" id=\"output_description\">{outDescription}</h2>\n        </div>\n        <div className=\"row output\">\n            <wordOutput className=\"col\" id=\"word_output\">{wordOutput}</wordOutput>\n            {/*  */}\n        </div>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}